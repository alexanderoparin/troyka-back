package ru.oparin.troyka.service.telegram;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.DefaultAbsSender;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import ru.oparin.troyka.repository.TelegramBotSessionRepository;
import ru.oparin.troyka.repository.UserRepository;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
 */
@Service
@Slf4j
public class TelegramNotificationService extends DefaultAbsSender {

    private final UserRepository userRepository;
    private final TelegramBotSessionRepository telegramBotSessionRepository;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    public TelegramNotificationService(@Value("${telegram.bot.token}") String botToken,
                                       UserRepository userRepository,
                                       TelegramBotSessionRepository telegramBotSessionRepository) {
        super(new DefaultBotOptions());
        this.botToken = botToken;
        this.userRepository = userRepository;
        this.telegramBotSessionRepository = telegramBotSessionRepository;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param imageUrls —Å–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     * @param prompt –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public Mono<Void> sendImageReadyNotification(Long userId, List<String> imageUrls, String prompt) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);

        return userRepository.findById(userId)
                .switchIfEmpty(Mono.defer(() -> {
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", userId);
                    return Mono.empty();
                }))
                .flatMap(user -> {
                    if (user.getTelegramId() == null || !Boolean.TRUE.equals(user.getTelegramNotificationsEnabled())) {
                        log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç Telegram ID –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", userId);
                        return Mono.empty();
                    }

                    return sendImageReadyMessage(user.getTelegramId(), imageUrls, prompt);
                })
                .doOnSuccess(v -> log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId))
                .doOnError(error -> log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, error));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ–∏–Ω—Ç–æ–≤.
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param currentPoints —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤
     */
    public Mono<Void> sendLowBalanceNotification(Long userId, Integer currentPoints) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);

        return userRepository.findById(userId)
                .switchIfEmpty(Mono.defer(() -> {
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ", userId);
                    return Mono.empty();
                }))
                .flatMap(user -> {
                    if (user.getTelegramId() == null || !Boolean.TRUE.equals(user.getTelegramNotificationsEnabled())) {
                        log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç Telegram ID –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", userId);
                        return Mono.empty();
                    }

                    return sendLowBalanceMessage(user.getTelegramId(), currentPoints);
                })
                .doOnSuccess(v -> log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId))
                .doOnError(error -> log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, error));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Mono<Void> sendWelcomeMessage(Long userId) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);

        return userRepository.findById(userId)
                .switchIfEmpty(Mono.defer(() -> {
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", userId);
                    return Mono.empty();
                }))
                .flatMap(user -> {
                    if (user.getTelegramId() == null) {
                        log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç Telegram ID", userId);
                        return Mono.empty();
                    }

                    return sendWelcomeMessage(user.getTelegramId(), user.getUsername());
                })
                .doOnSuccess(v -> log.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId))
                .doOnError(error -> log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, error));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
     */
    private Mono<Void> sendImageReadyMessage(Long telegramId, List<String> imageUrls, String prompt) {
        String message = String.format(
                "üé® *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!*\n\n" +
                "üìù *–ü—Ä–æ–º–ø—Ç:* %s\n" +
                "üñºÔ∏è *–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:* %d\n\n" +
                "–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                prompt,
                imageUrls.size()
        );

        return sendMessage(telegramId, message)
                .then(sendImages(telegramId, imageUrls))
                .then();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ.
     */
    private Mono<Void> sendLowBalanceMessage(Long telegramId, Integer currentPoints) {
        String message = String.format(
                "‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤*\n\n" +
                "üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* %d –ø–æ–∏–Ω—Ç–æ–≤\n" +
                "üõí *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å* –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n" +
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://24reshai.ru/pricing",
                currentPoints
        );

        return sendMessage(telegramId, message).then();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    private Mono<Void> sendWelcomeMessage(Long telegramId, String username) {
        String message = String.format(
                "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 24reshai, %s!*\n\n" +
                "üé® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –∏–∑ Telegram!\n\n" +
                "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n" +
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n" +
                "‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help, /balance, /history\n\n" +
                "üöÄ *–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!*",
                username
        );

        return sendMessage(telegramId, message).then();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    private Mono<Void> sendImages(Long telegramId, List<String> imageUrls) {
        return Mono.fromRunnable(() -> {
            try {
                for (String imageUrl : imageUrls) {
                    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
                    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", imageUrl, telegramId);
                }
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", telegramId, e);
            }
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    private Mono<Boolean> sendMessage(Long chatId, String text) {
        return Mono.fromCallable(() -> {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(text);
            message.setParseMode("Markdown");
            try {
                execute(message);
                log.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç {}: {}", chatId, text);
                return true;
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–∞—Ç {}: {}", chatId, e.getMessage());
                return false;
            }
        }).subscribeOn(Schedulers.boundedElastic());
    }
}
